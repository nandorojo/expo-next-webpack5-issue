diff --git a/node_modules/@expo/webpack-config/webpack/addons/withUnimodules.js b/node_modules/@expo/webpack-config/webpack/addons/withUnimodules.js
index 67671c7..08dbf6f 100644
--- a/node_modules/@expo/webpack-config/webpack/addons/withUnimodules.js
+++ b/node_modules/@expo/webpack-config/webpack/addons/withUnimodules.js
@@ -40,6 +40,7 @@ function withUnimodules(webpackConfig = {}, env = {}, argv = {}) {
     env.mode = env.mode || webpackConfig.mode;
     const environment = env_1.validateEnvironment(env);
     let { supportsFontLoading } = argv;
+    const { webpack5 } = argv
     // If the args don't specify this then we'll check if the input already supports font loading.
     if (typeof supportsFontLoading === 'undefined') {
         const supportedFonts = ['ttf', 'otf', 'woff', 'woff2', 'eot'];
@@ -105,7 +106,7 @@ function withUnimodules(webpackConfig = {}, env = {}, argv = {}) {
         extensions: env_1.getModuleFileExtensions('web') });
     // Transpile and remove expo modules from Next.js externals.
     const includeFunc = babelLoader.include;
-    webpackConfig = ignoreExternalModules(webpackConfig, includeFunc);
+    webpackConfig = ignoreExternalModules(webpackConfig, includeFunc, webpack5);
     // Add a loose requirement on the ResizeObserver polyfill if it's installed...
     webpackConfig = withEntry_1.default(webpackConfig, env, {
         entryPath: 'resize-observer-polyfill/dist/ResizeObserver.global',
@@ -125,7 +126,7 @@ exports.default = withUnimodules;
  * @param webpackConfig Config to be modified
  * @param shouldIncludeModule A method that returns a boolean when the input module should be transpiled and externed.
  */
-function ignoreExternalModules(webpackConfig, shouldIncludeModule) {
+function ignoreExternalModules(webpackConfig, shouldIncludeModule, isWebpack5) {
     if (!webpackConfig.externals) {
         return webpackConfig;
     }
@@ -136,6 +137,16 @@ function ignoreExternalModules(webpackConfig, shouldIncludeModule) {
         if (typeof external !== 'function') {
             return external;
         }
+        if (isWebpack5) {
+            return ((ctx, cb) => {
+                const relPath = path_1.default.join('node_modules', ctx.request);
+
+                if (shouldIncludeModule(relPath)) {
+                    return
+                }
+                return external(ctx, cb)
+            })
+        }
         return ((ctx, req, cb) => {
             const relPath = path_1.default.join('node_modules', req);
             return shouldIncludeModule(relPath) ? cb() : external(ctx, req, cb);
